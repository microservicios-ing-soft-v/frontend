name: Build, Push & Deploy Frontend to Container Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}
  RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
  CONTAINERAPPS_ENVIRONMENT: ${{ secrets.CONTAINERAPPS_ENVIRONMENT }}
  SERVICE_NAME: 'frontend'

jobs:
  build_push_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ env.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ env.AZURE_CLIENT_SECRET }}",
              "tenantId": "${{ env.AZURE_TENANT_ID }}",
              "subscriptionId": "${{ env.AZURE_SUBSCRIPTION_ID }}"
            }

      - name: Get ACR Login Server from Azure Key Vault
        id: get_acr
        run: |
          ACR_LOGIN_SERVER=$(az keyvault secret show --vault-name ${{ env.KEY_VAULT_NAME }} --name acr-login-server --query value -o tsv)
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

      - name: Docker Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ env.AZURE_CLIENT_ID }}
          password: ${{ env.AZURE_CLIENT_SECRET }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }},${{ env.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:latest
          context: .

      - name: Get API Gateway URL
        id: get_gateway_url
        run: |
          API_GATEWAY_FQDN=$(az containerapp show --name api-gateway --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query properties.configuration.ingress.fqdn -o tsv || echo "")
          if [ -z "$API_GATEWAY_FQDN" ]; then
            echo "API Gateway FQDN not found. Using default Container Apps URL pattern."
            API_GATEWAY_FQDN="api-gateway.${CONTAINERAPPS_ENVIRONMENT_DEFAULT_DOMAIN}"
          fi
          echo "API_GATEWAY_URL=https://$API_GATEWAY_FQDN" >> $GITHUB_ENV

      - name: Get Zipkin URL
        id: get_zipkin_url
        run: |
          ZIPKIN_FQDN=$(az containerapp show --name zipkin --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query properties.configuration.ingress.fqdn -o tsv || echo "")
          if [ -z "$ZIPKIN_FQDN" ]; then
            echo "Zipkin FQDN not found. Using default Container Apps URL pattern."
            ZIPKIN_FQDN="zipkin.${CONTAINERAPPS_ENVIRONMENT_DEFAULT_DOMAIN}"
          fi
          echo "ZIPKIN_URL=https://$ZIPKIN_FQDN/api/v2/spans" >> $GITHUB_ENV

      - name: Create or Update Container App
        run: |
          if az containerapp show --name ${{ env.SERVICE_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} &>/dev/null; then
            echo "Container App ${{ env.SERVICE_NAME }} exists, updating..."
            az containerapp update \
              --name ${{ env.SERVICE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
              --set-env-vars "AUTH_API_ADDRESS=${{ env.API_GATEWAY_URL }}/auth" "TODOS_API_ADDRESS=${{ env.API_GATEWAY_URL }}/todos" "ZIPKIN_URL=${{ env.ZIPKIN_URL }}"
          else
            echo "Container App ${{ env.SERVICE_NAME }} does not exist, creating..."
            az containerapp create \
              --name ${{ env.SERVICE_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
              --environment ${{ env.CONTAINERAPPS_ENVIRONMENT }} \
              --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
              --registry-server ${{ env.ACR_LOGIN_SERVER }} \
              --registry-username ${{ env.AZURE_CLIENT_ID }} \
              --registry-password ${{ env.AZURE_CLIENT_SECRET }} \
              --env-vars "AUTH_API_ADDRESS=${{ env.API_GATEWAY_URL }}/auth" "TODOS_API_ADDRESS=${{ env.API_GATEWAY_URL }}/todos" "ZIPKIN_URL=${{ env.ZIPKIN_URL }}" \
              --ingress external \
              --target-port 8080
          fi

      - name: Azure Logout
        run: az logout
